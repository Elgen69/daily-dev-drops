=============================
         JAVASCRIPT
=============================

// File: taskManager.js
class Task {
    constructor(name, priority = "normal") {
        this.name = name;
        this.priority = priority;
        this.completed = false;
    }

    complete() {
        this.completed = true;
    }
}

const tasks = [
    new Task("Buy groceries"),
    new Task("Finish homework", "high"),
    new Task("Watch anime")
];

tasks[1].complete();

for (const task of tasks) {
    console.log(`${task.name} - ${task.priority} - ${task.completed ? "Done" : "Pending"}`);
}

=============================
         TYPESCRIPT
=============================

// File: userModel.ts
interface User {
    id: number;
    username: string;
    email: string;
    active: boolean;
}

class UserService {
    private users: User[] = [];

    addUser(user: User): void {
        this.users.push(user);
    }

    listUsers(): User[] {
        return this.users.filter(u => u.active);
    }
}

const service = new UserService();
service.addUser({ id: 1, username: "elgen", email: "elgen@email.com", active: true });
console.log(service.listUsers());

=============================
           GO
=============================

// File: math_ops.go
package main

import (
    "fmt"
)

func add(x int, y int) int {
    return x + y
}

func fibonacci(n int) []int {
    fib := []int{0, 1}
    for i := 2; i < n; i++ {
        fib = append(fib, fib[i-1]+fib[i-2])
    }
    return fib
}

func main() {
    fmt.Println("5 + 3 =", add(5, 3))
    fmt.Println("Fibonacci(10):", fibonacci(10))
}

=============================
           RUST
=============================

// File: calculator.rs
fn add(a: i32, b: i32) -> i32 {
    a + b
}

fn factorial(n: u32) -> u32 {
    (1..=n).product()
}

fn main() {
    println!("Sum: {}", add(10, 20));
    println!("Factorial of 5: {}", factorial(5));
}

=============================
           C++
=============================

// File: Graph.cpp
#include <iostream>
#include <vector>
using namespace std;

class Graph {
    int V;
    vector<vector<int>> adj;
public:
    Graph(int V) : V(V), adj(V) {}
    void addEdge(int v, int w) {
        adj[v].push_back(w);
    }
    void printGraph() {
        for (int v = 0; v < V; ++v) {
            cout << v << ": ";
            for (int w : adj[v])
                cout << w << " ";
            cout << endl;
        }
    }
};

int main() {
    Graph g(4);
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 2);
    g.addEdge(2, 3);
    g.printGraph();
    return 0;
}

=============================
          KOTLIN
=============================

// File: DataProcessor.kt
data class Product(val name: String, val price: Double)

fun main() {
    val products = listOf(
        Product("Bread", 50.0),
        Product("Milk", 30.0),
        Product("Eggs", 60.0)
    )
    val total = products.sumOf { it.price }
    println("Total: â‚±$total")
}

=============================
          RUBY
=============================

# File: timer.rb
class Timer
  def initialize(name)
    @name = name
    @start_time = Time.now
  end

  def stop
    elapsed = Time.now - @start_time
    puts "#{@name} took #{elapsed.round(2)} seconds"
  end
end

t = Timer.new("Code Block")
sleep(2)
t.stop

=============================
          PHP
=============================

<!-- File: contactForm.php -->
<?php
function sanitize($data) {
    return htmlspecialchars(stripslashes(trim($data)));
}

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $name = sanitize($_POST["name"]);
    echo "Hello, " . $name;
}
?>

<form method="POST">
    <input name="name" type="text" />
    <input type="submit" value="Send" />
</form>

=============================
          SWIFT
=============================

// File: HelloWorld.swift
import Foundation

func greet(name: String) -> String {
    return "Hello, \(name)!"
}

print(greet(name: "Elgen"))

=============================
    HTML + CSS + JS
=============================

<!-- File: index.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Click Counter</title>
    <style>
        body { font-family: Arial; text-align: center; margin-top: 50px; }
        button { padding: 10px 20px; font-size: 18px; }
    </style>
</head>
<body>
    <h1>Click Counter</h1>
    <p id="count">0</p>
    <button onclick="increment()">Click me</button>

    <script>
        let count = 0;
        function increment() {
            count++;
            document.getElementById("count").innerText = count;
        }
    </script>
</body>
</html>

